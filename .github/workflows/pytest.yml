name: Python application

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:

    strategy:
      matrix:
        python-version: [3.8.5]
        #os: ["ubuntu-latest", "macos-latest"]
        os: ["ubuntu-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
         python-version: ${{ matrix.python-version }}

    - name: Setup Conda
      uses: s-weigand/setup-conda@v1
      with:
         activate-conda: true
    - run: conda --version
    - run: which python
    - name: Install dependencies
      run: |
         conda install mkl blas=*=mkl scipy numpy pytest pytest-mock pytest-cov mock flake8 coverage
         echo "::add-path::${GITHUB_WORKSPACE}/bin"
    - run: which python

#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install .
#        pip install scipy
#        echo "::add-path::${GITHUB_WORKSPACE}/bin"


    - name: Lint with flake8
      run: |
        flake8 . --config=setup.cfg --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --config=setup.cfg --count  --statistics
        #flake8 . --config=setup.cfg --count  --statistics --exit-zero


    - name: Install GFortran Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install gfortran

#    - name: Install GFortran macOS
#      if: contains(matrix.os, 'macos')
#      run: brew install gcc || brew upgrade gcc || true


    - name: Compile Driver
      shell: bash
      run: |
         cd drivers
         make

    - name: Test Conda 
      shell: bash
      run: python 'import numpy; print(numpy.__version__)'

         #    - name: Pytest
         #      shell: bash
         #      run: |
         #        pwd
         #        pytest 
        #pytest --cov=./ --cov-report=xml

    #- name: Upload coverage
    #  uses: codecov/codecov-action@v1
    #  with:
    #    token: ${{ secrets.CODECOV_TOKEN }}
    #    file: ./coverage.xml
    #    flags: tests
    #    name: codecov-umbrella
    #    fail_ci_if_error: true
